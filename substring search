#include <iostream>
#include <vector>
#include <queue>

using namespace std;

vector<int> prefix(string word) {
    vector<int> pref(word.length());
    pref[0] = 0;
    for (int i = 1; i < word.length(); i++) {
        int k = pref[i - 1];
        while (k > 0 && word[k] != word[i])
            k = pref[k - 1];
        if (word[i] == word[k])
            k++;
        pref[i] = k;
    }
	return pref;
}

vector<int> findEntries(string pattern, string word) {
    vector<int> pi = prefix(pattern);
    vector<int> entries;
    int prev = 0;
    for (int i = 0; i < word.length(); i++) {
        int j = prev;
        while (j > 0 && word[i] != pattern[j])
            j = pi[j - 1];
        j = (word[i] == pattern[j] ? j + 1 : 0);
        if (j == pattern.length())
            entries.push_back(i - pattern.length() + 1);
        prev = j;
    }
    return entries;
}

int main()  {
    string pattern;
    string str;
    cin >> pattern;
    cin >> str;
    vector<int> entries = findEntries(pattern, str);
    for (int i = 0; i < entries.size(); i++)
        cout << entries[i] << ' ';
    return 0;
}
